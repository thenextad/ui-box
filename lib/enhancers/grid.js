"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.propEnhancers = exports.propValidators = exports.propAliases = exports.propTypes = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _getCss = _interopRequireDefault(require("../get-css"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var propTypes = {
  columnGap: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  gap: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  grid: _propTypes.default.string,
  gridArea: _propTypes.default.string,
  gridAutoColumns: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  gridAutoFlow: _propTypes.default.string,
  gridAutoRows: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  gridColumn: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  gridColumnEnd: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  gridColumnGap: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  gridColumnStart: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  gridGap: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  gridRow: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  gridRowEnd: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  gridRowGap: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  gridRowStart: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  gridTemplate: _propTypes.default.string,
  gridTemplateAreas: _propTypes.default.string,
  gridTemplateColumns: _propTypes.default.string,
  gridTemplateRows: _propTypes.default.string,
  rowGap: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number])
};
exports.propTypes = propTypes;
var propAliases = {};
exports.propAliases = propAliases;
var propValidators = {};
exports.propValidators = propValidators;
var _columnGap = {
  className: 'col-gap',
  cssName: 'column-gap',
  jsName: 'columnGap'
};
var _gap = {
  className: 'gap',
  cssName: 'gap',
  jsName: 'gap'
};
var _grid = {
  className: 'grd',
  cssName: 'grid',
  jsName: 'grid',
  complexValue: true
};
var _gridArea = {
  className: 'grd-ara',
  cssName: 'grid-area',
  jsName: 'gridArea',
  complexValue: true
};
var _gridAutoColumns = {
  className: 'grd-ato-col',
  cssName: 'grid-auto-columns',
  jsName: 'gridAutoColumns',
  complexValue: true
};
var _gridAutoFlow = {
  className: 'grd-ato-flw',
  cssName: 'grid-auto-flow',
  jsName: 'gridAutoFlow'
};
var _gridAutoRows = {
  className: 'grd-ato-row',
  cssName: 'grid-auto-rows',
  jsName: 'gridAutoRows',
  complexValue: true
};
var _gridColumn = {
  className: 'grd-col',
  cssName: 'grid-column',
  jsName: 'gridColumn',
  defaultUnit: '',
  complexValue: true
};
var _gridColumnEnd = {
  className: 'grd-col-end',
  cssName: 'grid-column-end',
  jsName: 'gridColumnEnd',
  defaultUnit: ''
};
var _gridColumnGap = {
  className: 'grd-col-gap',
  cssName: 'grid-column-gap',
  jsName: 'gridColumnGap'
};
var _gridColumnStart = {
  className: 'grd-col-str',
  cssName: 'grid-column-start',
  jsName: 'gridColumnStart',
  defaultUnit: ''
};
var _gridGap = {
  className: 'grd-gap',
  cssName: 'grid-gap',
  jsName: 'gridGap'
};
var _gridRow = {
  className: 'grd-row',
  cssName: 'grid-row',
  jsName: 'gridRow',
  defaultUnit: '',
  complexValue: true
};
var _gridRowEnd = {
  className: 'grd-row-end',
  cssName: 'grid-row-end',
  jsName: 'gridRowEnd',
  defaultUnit: ''
};
var _gridRowGap = {
  className: 'grd-row-gap',
  cssName: 'grid-row-gap',
  jsName: 'gridRowGap'
};
var _gridRowStart = {
  className: 'grd-row-str',
  cssName: 'grid-row-start',
  jsName: 'gridRowStart',
  defaultUnit: ''
};
var _gridTemplate = {
  className: 'grd-tmp',
  cssName: 'grid-template',
  jsName: 'gridTemplate',
  complexValue: true
};
var _gridTemplateAreas = {
  className: 'grd-tmp-ara',
  cssName: 'grid-template-areas',
  jsName: 'gridTemplateAreas',
  complexValue: true
};
var _gridTemplateColumns = {
  className: 'grd-tmp-col',
  cssName: 'grid-template-columns',
  jsName: 'gridTemplateColumns',
  complexValue: true
};
var _gridTemplateRows = {
  className: 'grd-tmp-row',
  cssName: 'grid-template-rows',
  jsName: 'gridTemplateRows',
  complexValue: true
};
var _rowGap = {
  className: 'row-gap',
  cssName: 'row-gap',
  jsName: 'rowGap'
};
var propEnhancers = {
  columnGap: function columnGap(value) {
    return (0, _getCss.default)(_columnGap, value);
  },
  gap: function gap(value) {
    return (0, _getCss.default)(_gap, value);
  },
  grid: function grid(value) {
    return (0, _getCss.default)(_grid, value);
  },
  gridArea: function gridArea(value) {
    return (0, _getCss.default)(_gridArea, value);
  },
  gridAutoColumns: function gridAutoColumns(value) {
    return (0, _getCss.default)(_gridAutoColumns, value);
  },
  gridAutoFlow: function gridAutoFlow(value) {
    return (0, _getCss.default)(_gridAutoFlow, value);
  },
  gridAutoRows: function gridAutoRows(value) {
    return (0, _getCss.default)(_gridAutoRows, value);
  },
  gridColumn: function gridColumn(value) {
    return (0, _getCss.default)(_gridColumn, value);
  },
  gridColumnEnd: function gridColumnEnd(value) {
    return (0, _getCss.default)(_gridColumnEnd, value);
  },
  gridColumnGap: function gridColumnGap(value) {
    return (0, _getCss.default)(_gridColumnGap, value);
  },
  gridColumnStart: function gridColumnStart(value) {
    return (0, _getCss.default)(_gridColumnStart, value);
  },
  gridGap: function gridGap(value) {
    return (0, _getCss.default)(_gridGap, value);
  },
  gridRow: function gridRow(value) {
    return (0, _getCss.default)(_gridRow, value);
  },
  gridRowEnd: function gridRowEnd(value) {
    return (0, _getCss.default)(_gridRowEnd, value);
  },
  gridRowGap: function gridRowGap(value) {
    return (0, _getCss.default)(_gridRowGap, value);
  },
  gridRowStart: function gridRowStart(value) {
    return (0, _getCss.default)(_gridRowStart, value);
  },
  gridTemplate: function gridTemplate(value) {
    return (0, _getCss.default)(_gridTemplate, value);
  },
  gridTemplateAreas: function gridTemplateAreas(value) {
    return (0, _getCss.default)(_gridTemplateAreas, value);
  },
  gridTemplateColumns: function gridTemplateColumns(value) {
    return (0, _getCss.default)(_gridTemplateColumns, value);
  },
  gridTemplateRows: function gridTemplateRows(value) {
    return (0, _getCss.default)(_gridTemplateRows, value);
  },
  rowGap: function rowGap(value) {
    return (0, _getCss.default)(_rowGap, value);
  }
};
exports.propEnhancers = propEnhancers;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,