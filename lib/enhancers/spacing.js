"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.propEnhancers = exports.propValidators = exports.propAliases = exports.propTypes = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _getCss = _interopRequireDefault(require("../get-css"));

var _regex = require("../utils/regex");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var propTypes = {
  margin: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  marginBottom: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  marginLeft: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  marginRight: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  marginTop: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  marginX: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  marginY: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  padding: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  paddingBottom: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  paddingLeft: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  paddingRight: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  paddingTop: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  paddingX: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  paddingY: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number])
};
exports.propTypes = propTypes;
var propAliases = {
  margin: ['marginBottom', 'marginLeft', 'marginRight', 'marginTop'],
  marginX: ['marginLeft', 'marginRight'],
  marginY: ['marginBottom', 'marginTop'],
  padding: ['paddingBottom', 'paddingLeft', 'paddingRight', 'paddingTop'],
  paddingX: ['paddingLeft', 'paddingRight'],
  paddingY: ['paddingBottom', 'paddingTop']
};
exports.propAliases = propAliases;
var propValidators = {};
exports.propValidators = propValidators;

if (process.env.NODE_ENV !== 'production') {
  propValidators.margin = function (value) {
    if (_regex.spacesOutsideParentheses.test(value)) {
      return "multiple values (\u201C".concat(value, "\u201D) aren\u055At supported with \u201Cmargin\u201D. Use \u201CmarginX\u201D, \u201CmarginY\u201D \u201CmarginBottom\u201D, \u201CmarginLeft\u201D, \u201CmarginRight\u201D and \u201CmarginTop\u201D instead.");
    }
  };

  propValidators.marginX = function (value) {
    if (_regex.spacesOutsideParentheses.test(value)) {
      return "multiple values (\u201C".concat(value, "\u201D) aren\u055At supported with \u201CmarginX\u201D. Use \u201CmarginLeft\u201D and \u201CmarginRight\u201D instead.");
    }
  };

  propValidators.marginY = function (value) {
    if (_regex.spacesOutsideParentheses.test(value)) {
      return "multiple values (\u201C".concat(value, "\u201D) aren\u055At supported with \u201CmarginY\u201D. Use \u201CmarginBottom\u201D and \u201CmarginTop\u201D instead.");
    }
  };

  propValidators.padding = function (value) {
    if (_regex.spacesOutsideParentheses.test(value)) {
      return "multiple values (\u201C".concat(value, "\u201D) aren\u055At supported with \u201Cpadding\u201D. Use \u201CpaddingX\u201D, \u201CpaddingY\u201D \u201CpaddingBottom\u201D, \u201CpaddingLeft\u201D, \u201CpaddingRight\u201D and \u201CpaddingTop\u201D instead.");
    }
  };

  propValidators.paddingX = function (value) {
    if (_regex.spacesOutsideParentheses.test(value)) {
      return "multiple values (\u201C".concat(value, "\u201D) aren\u055At supported with \u201CpaddingX\u201D. Use \u201CpaddingLeft\u201D and \u201CpaddingRight\u201D instead.");
    }
  };

  propValidators.paddingY = function (value) {
    if (_regex.spacesOutsideParentheses.test(value)) {
      return "multiple values (\u201C".concat(value, "\u201D) aren\u055At supported with \u201CpaddingY\u201D. Use \u201CpaddingBottom\u201D and \u201CpaddingTop\u201D instead.");
    }
  };
}

var _marginTop = {
  className: 'mt',
  cssName: 'margin-top',
  jsName: 'marginTop'
};
var _marginRight = {
  className: 'mr',
  cssName: 'margin-right',
  jsName: 'marginRight'
};
var _marginBottom = {
  className: 'mb',
  cssName: 'margin-bottom',
  jsName: 'marginBottom'
};
var _marginLeft = {
  className: 'ml',
  cssName: 'margin-left',
  jsName: 'marginLeft'
};
var _paddingTop = {
  className: 'pt',
  cssName: 'padding-top',
  jsName: 'paddingTop'
};
var _paddingRight = {
  className: 'pr',
  cssName: 'padding-right',
  jsName: 'paddingRight'
};
var _paddingBottom = {
  className: 'pb',
  cssName: 'padding-bottom',
  jsName: 'paddingBottom'
};
var _paddingLeft = {
  className: 'pl',
  cssName: 'padding-left',
  jsName: 'paddingLeft'
};
var propEnhancers = {
  marginBottom: function marginBottom(value) {
    return (0, _getCss.default)(_marginBottom, value);
  },
  marginLeft: function marginLeft(value) {
    return (0, _getCss.default)(_marginLeft, value);
  },
  marginRight: function marginRight(value) {
    return (0, _getCss.default)(_marginRight, value);
  },
  marginTop: function marginTop(value) {
    return (0, _getCss.default)(_marginTop, value);
  },
  paddingBottom: function paddingBottom(value) {
    return (0, _getCss.default)(_paddingBottom, value);
  },
  paddingLeft: function paddingLeft(value) {
    return (0, _getCss.default)(_paddingLeft, value);
  },
  paddingRight: function paddingRight(value) {
    return (0, _getCss.default)(_paddingRight, value);
  },
  paddingTop: function paddingTop(value) {
    return (0, _getCss.default)(_paddingTop, value);
  }
};
exports.propEnhancers = propEnhancers;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,