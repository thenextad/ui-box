"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.propEnhancers = exports.propValidators = exports.propAliases = exports.propTypes = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _getCss = _interopRequireDefault(require("../get-css"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var propTypes = {
  bottom: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  left: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  position: _propTypes.default.string,
  right: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  top: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number])
};
exports.propTypes = propTypes;
var propAliases = {};
exports.propAliases = propAliases;
var propValidators = {};
exports.propValidators = propValidators;
var _position = {
  className: 'pst',
  cssName: 'position',
  jsName: 'position',
  safeValue: true,
  isPrefixed: true
};
var _top = {
  className: 'top',
  cssName: 'top',
  jsName: 'top'
};
var _right = {
  className: 'rgt',
  cssName: 'right',
  jsName: 'right'
};
var _bottom = {
  className: 'btm',
  cssName: 'bottom',
  jsName: 'bottom'
};
var _left = {
  className: 'lft',
  cssName: 'left',
  jsName: 'left'
};
var propEnhancers = {
  bottom: function bottom(value) {
    return (0, _getCss.default)(_bottom, value);
  },
  left: function left(value) {
    return (0, _getCss.default)(_left, value);
  },
  position: function position(value) {
    return (0, _getCss.default)(_position, value);
  },
  right: function right(value) {
    return (0, _getCss.default)(_right, value);
  },
  top: function top(value) {
    return (0, _getCss.default)(_top, value);
  }
};
exports.propEnhancers = propEnhancers;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9lbmhhbmNlcnMvcG9zaXRpb24uanMiXSwibmFtZXMiOlsicHJvcFR5cGVzIiwiYm90dG9tIiwiUHJvcFR5cGVzIiwib25lT2ZUeXBlIiwic3RyaW5nIiwibnVtYmVyIiwibGVmdCIsInBvc2l0aW9uIiwicmlnaHQiLCJ0b3AiLCJwcm9wQWxpYXNlcyIsInByb3BWYWxpZGF0b3JzIiwiY2xhc3NOYW1lIiwiY3NzTmFtZSIsImpzTmFtZSIsInNhZmVWYWx1ZSIsImlzUHJlZml4ZWQiLCJwcm9wRW5oYW5jZXJzIiwidmFsdWUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFDQTs7OztBQUVPLElBQU1BLFNBQVMsR0FBRztBQUN2QkMsRUFBQUEsTUFBTSxFQUFFQyxtQkFBVUMsU0FBVixDQUFvQixDQUFDRCxtQkFBVUUsTUFBWCxFQUFtQkYsbUJBQVVHLE1BQTdCLENBQXBCLENBRGU7QUFFdkJDLEVBQUFBLElBQUksRUFBRUosbUJBQVVDLFNBQVYsQ0FBb0IsQ0FBQ0QsbUJBQVVFLE1BQVgsRUFBbUJGLG1CQUFVRyxNQUE3QixDQUFwQixDQUZpQjtBQUd2QkUsRUFBQUEsUUFBUSxFQUFFTCxtQkFBVUUsTUFIRztBQUl2QkksRUFBQUEsS0FBSyxFQUFFTixtQkFBVUMsU0FBVixDQUFvQixDQUFDRCxtQkFBVUUsTUFBWCxFQUFtQkYsbUJBQVVHLE1BQTdCLENBQXBCLENBSmdCO0FBS3ZCSSxFQUFBQSxHQUFHLEVBQUVQLG1CQUFVQyxTQUFWLENBQW9CLENBQUNELG1CQUFVRSxNQUFYLEVBQW1CRixtQkFBVUcsTUFBN0IsQ0FBcEI7QUFMa0IsQ0FBbEI7O0FBUUEsSUFBTUssV0FBVyxHQUFHLEVBQXBCOztBQUVBLElBQU1DLGNBQWMsR0FBRyxFQUF2Qjs7QUFFUCxJQUFNSixTQUFRLEdBQUc7QUFDZkssRUFBQUEsU0FBUyxFQUFFLEtBREk7QUFFZkMsRUFBQUEsT0FBTyxFQUFFLFVBRk07QUFHZkMsRUFBQUEsTUFBTSxFQUFFLFVBSE87QUFJZkMsRUFBQUEsU0FBUyxFQUFFLElBSkk7QUFLZkMsRUFBQUEsVUFBVSxFQUFFO0FBTEcsQ0FBakI7QUFPQSxJQUFNUCxJQUFHLEdBQUc7QUFDVkcsRUFBQUEsU0FBUyxFQUFFLEtBREQ7QUFFVkMsRUFBQUEsT0FBTyxFQUFFLEtBRkM7QUFHVkMsRUFBQUEsTUFBTSxFQUFFO0FBSEUsQ0FBWjtBQUtBLElBQU1OLE1BQUssR0FBRztBQUNaSSxFQUFBQSxTQUFTLEVBQUUsS0FEQztBQUVaQyxFQUFBQSxPQUFPLEVBQUUsT0FGRztBQUdaQyxFQUFBQSxNQUFNLEVBQUU7QUFISSxDQUFkO0FBS0EsSUFBTWIsT0FBTSxHQUFHO0FBQ2JXLEVBQUFBLFNBQVMsRUFBRSxLQURFO0FBRWJDLEVBQUFBLE9BQU8sRUFBRSxRQUZJO0FBR2JDLEVBQUFBLE1BQU0sRUFBRTtBQUhLLENBQWY7QUFLQSxJQUFNUixLQUFJLEdBQUc7QUFDWE0sRUFBQUEsU0FBUyxFQUFFLEtBREE7QUFFWEMsRUFBQUEsT0FBTyxFQUFFLE1BRkU7QUFHWEMsRUFBQUEsTUFBTSxFQUFFO0FBSEcsQ0FBYjtBQU1PLElBQU1HLGFBQWEsR0FBRztBQUMzQmhCLEVBQUFBLE1BQU0sRUFBRSxnQkFBQWlCLEtBQUs7QUFBQSxXQUFJLHFCQUFPakIsT0FBUCxFQUFlaUIsS0FBZixDQUFKO0FBQUEsR0FEYztBQUUzQlosRUFBQUEsSUFBSSxFQUFFLGNBQUFZLEtBQUs7QUFBQSxXQUFJLHFCQUFPWixLQUFQLEVBQWFZLEtBQWIsQ0FBSjtBQUFBLEdBRmdCO0FBRzNCWCxFQUFBQSxRQUFRLEVBQUUsa0JBQUFXLEtBQUs7QUFBQSxXQUFJLHFCQUFPWCxTQUFQLEVBQWlCVyxLQUFqQixDQUFKO0FBQUEsR0FIWTtBQUkzQlYsRUFBQUEsS0FBSyxFQUFFLGVBQUFVLEtBQUs7QUFBQSxXQUFJLHFCQUFPVixNQUFQLEVBQWNVLEtBQWQsQ0FBSjtBQUFBLEdBSmU7QUFLM0JULEVBQUFBLEdBQUcsRUFBRSxhQUFBUyxLQUFLO0FBQUEsV0FBSSxxQkFBT1QsSUFBUCxFQUFZUyxLQUFaLENBQUo7QUFBQTtBQUxpQixDQUF0QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcydcbmltcG9ydCBnZXRDc3MgZnJvbSAnLi4vZ2V0LWNzcydcblxuZXhwb3J0IGNvbnN0IHByb3BUeXBlcyA9IHtcbiAgYm90dG9tOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMubnVtYmVyXSksXG4gIGxlZnQ6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5udW1iZXJdKSxcbiAgcG9zaXRpb246IFByb3BUeXBlcy5zdHJpbmcsXG4gIHJpZ2h0OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMubnVtYmVyXSksXG4gIHRvcDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm51bWJlcl0pXG59XG5cbmV4cG9ydCBjb25zdCBwcm9wQWxpYXNlcyA9IHt9XG5cbmV4cG9ydCBjb25zdCBwcm9wVmFsaWRhdG9ycyA9IHt9XG5cbmNvbnN0IHBvc2l0aW9uID0ge1xuICBjbGFzc05hbWU6ICdwc3QnLFxuICBjc3NOYW1lOiAncG9zaXRpb24nLFxuICBqc05hbWU6ICdwb3NpdGlvbicsXG4gIHNhZmVWYWx1ZTogdHJ1ZSxcbiAgaXNQcmVmaXhlZDogdHJ1ZVxufVxuY29uc3QgdG9wID0ge1xuICBjbGFzc05hbWU6ICd0b3AnLFxuICBjc3NOYW1lOiAndG9wJyxcbiAganNOYW1lOiAndG9wJ1xufVxuY29uc3QgcmlnaHQgPSB7XG4gIGNsYXNzTmFtZTogJ3JndCcsXG4gIGNzc05hbWU6ICdyaWdodCcsXG4gIGpzTmFtZTogJ3JpZ2h0J1xufVxuY29uc3QgYm90dG9tID0ge1xuICBjbGFzc05hbWU6ICdidG0nLFxuICBjc3NOYW1lOiAnYm90dG9tJyxcbiAganNOYW1lOiAnYm90dG9tJ1xufVxuY29uc3QgbGVmdCA9IHtcbiAgY2xhc3NOYW1lOiAnbGZ0JyxcbiAgY3NzTmFtZTogJ2xlZnQnLFxuICBqc05hbWU6ICdsZWZ0J1xufVxuXG5leHBvcnQgY29uc3QgcHJvcEVuaGFuY2VycyA9IHtcbiAgYm90dG9tOiB2YWx1ZSA9PiBnZXRDc3MoYm90dG9tLCB2YWx1ZSksXG4gIGxlZnQ6IHZhbHVlID0+IGdldENzcyhsZWZ0LCB2YWx1ZSksXG4gIHBvc2l0aW9uOiB2YWx1ZSA9PiBnZXRDc3MocG9zaXRpb24sIHZhbHVlKSxcbiAgcmlnaHQ6IHZhbHVlID0+IGdldENzcyhyaWdodCwgdmFsdWUpLFxuICB0b3A6IHZhbHVlID0+IGdldENzcyh0b3AsIHZhbHVlKVxufVxuIl19